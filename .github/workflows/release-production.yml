name: Release Production
on:
  push:
    branches:
      - main

  # This workflow dispatch, allows us to execute this workflow manually
  workflow_dispatch:

jobs:
  analyze:
    name: Analyze
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Shallow clones should be disabled for a better relevancy of analysis
      - uses: sonarsource/sonarqube-scan-action@master
        with:
          projectBaseDir: .
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      # If you wish to fail your job when the Quality Gate is red, uncomment the
      # following lines. This would typically be used to fail a deployment.
      # - uses: sonarsource/sonarqube-quality-gate-action@master
      #   timeout-minutes: 5
      #   env:
      #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: analyze

    steps:
      # check out the repository with all releases
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Create a temporary, uniquely named branch to push release info to
      - name: create temporary branch
        run: git branch "release-from-${{ github.sha }}" "${{ github.sha }}"

      # switch to the temporary branch
      - name: switch to new branch
        run: git checkout release-from-${{ github.sha }}

      # create release info and push it upstream
      - name: conventional Changelog Action
        id: changelog
        uses: TriPSs/conventional-changelog-action@v3
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          version-file: "./package.json,./package-lock.json"
          git-branch: "release-from-${{ github.sha }}"
          skip-git-pull: true
          tag-prefix: ""

      # create PR using GitHub CLI
      - name: create PR with release info
        if: steps.changelog.outputs.skipped == 'false'
        id: create-pr
        run: gh pr create --base main --head release-from-${{ github.sha }} --title 'Merge new release into main' --body 'Created by Github action'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # merge PR using GitHub CLI
      - name: merge PR with release info
        if: steps.changelog.outputs.skipped == 'false'
        id: merge-pr
        run: gh pr merge --admin --merge --subject 'Merge release info' --delete-branch
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # release info is now in main so we can continue as before
      - name: create release with last commit
        if: steps.changelog.outputs.skipped == 'false'
        uses: ncipollo/release-action@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ steps.changelog.outputs.tag }}
          name: ${{ steps.changelog.outputs.tag }}
          body: ${{ steps.changelog.outputs.clean_changelog }}

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: release
    steps:
      - name: checkout
        uses: actions/checkout@v3
        with:
          branch: main
          fetch-depth: 0

      - name: Get package version
        id: package-version
        uses: martinbeentjes/npm-get-version-action@master

      - name: Setup Docker buildx
        uses: docker/setup-buildx-action@v3

      - name: login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: harbor.kub3.dev
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}

      - name: push to Github Container Registry
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./.nixpacks/Dockerfile
          push: true
          tags: |
            ${{ vars.IMAGE_NAME }}:${{ steps.package-version.outputs.current-version }}
            ${{ vars.IMAGE_NAME }}:latest
